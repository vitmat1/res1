{
	"info": {
		"_postman_id": "0716d7fc-6312-4218-b56d-f1f4f9a89b82",
		"name": "lesson_1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let person = {",
							"    \"age\": \"20\",",
							"    \"family\": {",
							"        \"children\": [",
							"            [",
							"                \"Alex\",",
							"                24",
							"            ],",
							"            [",
							"                \"Kate\",",
							"                12",
							"            ]",
							"        ],",
							"        \"u_salary_1_5_year\": 2000",
							"    },",
							"    \"name\": \"Alex\",",
							"    \"salary\": 1000",
							"}",
							"",
							"",
							"// сревнение значения в массиве",
							"pm.test(\"item_2 Person\", function () {",
							"    pm.expect(+person.age).to.deep.equal(20)",
							"});",
							"",
							"// нахождение значения внутри массива",
							"pm.test(\"item_3 Person\", function () {",
							"    pm.expect(person.family.children[1][0]).to.deep.equal(\"Kate\")",
							"});",
							"",
							"// нахождение значения (параметр) в файле",
							"pm.test(\"item_4 Person\", function () {",
							"    pm.expect(person).to.have.property(\"name\")",
							"});",
							"",
							"// нахождение обьекта в файле ",
							"pm.test(\"item_5 Person\", function () {",
							"    pm.expect(person).to.deep.include({\"salary\": 1000})",
							"});",
							"",
							"// нахождение значения в определенном массиве",
							"pm.test(\"item_6 Person\", function () {",
							"    pm.expect(person.family.children[1]).to.deep.include(12)",
							"});",
							"",
							"// проверка на тип данных - массив",
							"pm.test(\"item_7  Person\", function () {",
							"    pm.expect(person.family.children[1]).to.be.a(\"Array\")",
							"});",
							"// проверка на тип данных - число",
							"pm.test(\"item_7_1 Person\", function () {",
							"    pm.expect(person.family.children[1][1]).to.be.a(\"Number\")",
							"});",
							"// проверка на тип данных ",
							"pm.test(\"item_7_2 Person\", function () {",
							"    pm.expect(person.name).to.be.a(\"String\")",
							"});",
							"",
							"// проверка на тип данных - массив (\"Array\") + проверка на содержание значения (12)",
							"pm.test(\"item_8 Person\", function () {",
							"    pm.expect(person.family.children[0]).to.be.an(\"Array\").that.include(24)",
							"});",
							"",
							"// сравнение массива с массивом",
							"pm.test(\"item_6 Person\", function () {",
							"    pm.expect(person.family.children[1]).to.eql([\"Kate\",12])",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"// let item_1 = \"Alex\"",
							"",
							"// pm.test(\"item_1_test\", function () {",
							"//     pm.expect(item_1).to.equal(\"Alex\")",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Vadim/jjd909/12242kjkWpqc322823r23r3r457271evny",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		}
	]
}